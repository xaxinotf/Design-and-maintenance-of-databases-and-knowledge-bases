CREATE TYPE "person_role" AS ENUM (
  'director',
  'manager',
  'technician',
  'volunteer_coordinator'
);

CREATE TYPE "artist_type" AS ENUM (
  'solo',
  'band'
);

CREATE TYPE "payment_currency" AS ENUM (
  'UAH',
  'USD',
  'EUR',
  'GBP'
);

CREATE TYPE "membership_role" AS ENUM (
  'member',
  'founder',
  'session_musician'
);

CREATE TABLE "festival" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(200) UNIQUE NOT NULL,
  "start_date" date NOT NULL,
  "end_date" date NOT NULL,
  "city" varchar(100) NOT NULL,
  "main_organizer_id" int NOT NULL
);

CREATE TABLE "organizer" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "org_name" varchar(200) UNIQUE NOT NULL,
  "contact_email" varchar(150),
  "contact_phone" varchar(50),
  "address" varchar(300)
);

CREATE TABLE "person" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "full_name" varchar(150) NOT NULL,
  "email" varchar(150),
  "phone" varchar(50),
  "role" person_role NOT NULL
);

CREATE TABLE "festival_director" (
  "festival_id" int PRIMARY KEY,
  "person_id" int UNIQUE NOT NULL
);

CREATE TABLE "venue" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(200) NOT NULL,
  "address" varchar(300),
  "capacity" int,
  "city" varchar(100)
);

CREATE TABLE "stage" (
  "venue_id" int NOT NULL,
  "stage_name" varchar(150) NOT NULL,
  "capacity" int,
  "stage_type" varchar(100),
  PRIMARY KEY ("venue_id", "stage_name")
);

CREATE TABLE "event" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "festival_id" int NOT NULL,
  "venue_id" int NOT NULL,
  "stage_name" varchar(150) NOT NULL,
  "title" varchar(200) NOT NULL,
  "start_datetime" datetime NOT NULL,
  "end_datetime" datetime NOT NULL,
  "estimated_budget" numeric(12,2)
);

CREATE TABLE "artist" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "display_name" varchar(200) NOT NULL,
  "country" varchar(100),
  "artist_type" artist_type NOT NULL
);

CREATE TABLE "solo_artist" (
  "artist_id" int PRIMARY KEY,
  "real_name" varchar(150),
  "birth_date" date
);

CREATE TABLE "band" (
  "artist_id" int PRIMARY KEY,
  "formed_year" int,
  "genre" varchar(100)
);

CREATE TABLE "artist_member" (
  "band_artist_id" int NOT NULL,
  "member_artist_id" int NOT NULL,
  "role_in_band" membership_role NOT NULL,
  "joined_on" date,
  "left_on" date,
  PRIMARY KEY ("band_artist_id", "member_artist_id")
);

CREATE TABLE "performance" (
  "event_id" int NOT NULL,
  "artist_id" int NOT NULL,
  "billing_order" int,
  "role" varchar(100),
  "duration_minutes" int,
  PRIMARY KEY ("event_id", "artist_id")
);

CREATE TABLE "equipment_provider" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "company_name" varchar(200) NOT NULL,
  "contact_phone" varchar(50),
  "contact_email" varchar(150),
  "service_type" varchar(100)
);

CREATE TABLE "event_provider" (
  "event_id" int NOT NULL,
  "provider_id" int NOT NULL,
  "service_description" varchar(200),
  "fee_amount" numeric(12,2),
  PRIMARY KEY ("event_id", "provider_id")
);

CREATE TABLE "contract" (
  "artist_id" int NOT NULL,
  "event_id" int NOT NULL,
  "organizer_id" int NOT NULL,
  "fee_amount" numeric(12,2) NOT NULL,
  "currency" payment_currency NOT NULL DEFAULT 'USD',
  "signed_on" date NOT NULL,
  "rider_required" boolean NOT NULL DEFAULT false,
  PRIMARY KEY ("artist_id", "event_id", "organizer_id")
);

CREATE TABLE "volunteer_team" (
  "festival_id" int NOT NULL,
  "team_name" varchar(150) NOT NULL,
  "coordinator_id" int,
  PRIMARY KEY ("festival_id", "team_name")
);

CREATE TABLE "volunteer_assignment" (
  "festival_id" int NOT NULL,
  "team_name" varchar(150) NOT NULL,
  "person_id" int NOT NULL,
  "assigned_on" date,
  PRIMARY KEY ("festival_id", "team_name", "person_id")
);

CREATE TABLE "artist_mentorship" (
  "mentor_id" int NOT NULL,
  "mentee_id" int NOT NULL,
  "since_date" date,
  "ended_on" date,
  PRIMARY KEY ("mentor_id", "mentee_id")
);

CREATE INDEX ON "festival" ("main_organizer_id");

CREATE INDEX ON "event" ("festival_id");

CREATE INDEX ON "event" ("venue_id", "stage_name");

CREATE INDEX ON "artist_member" ("member_artist_id");

CREATE INDEX ON "performance" ("artist_id");

CREATE INDEX ON "event_provider" ("provider_id");

CREATE INDEX ON "contract" ("organizer_id");

CREATE INDEX ON "volunteer_team" ("coordinator_id");

CREATE INDEX ON "volunteer_assignment" ("person_id");

COMMENT ON TABLE "festival" IS 'Фестиваль: має головного організатора (організація) і директора (person, 1:1).';

COMMENT ON TABLE "person" IS 'Фізична особа: директор фестивалю, менеджер, технік, координатор волонтерів тощо.';

COMMENT ON TABLE "festival_director" IS 'Ідентифікатор директора фестивалю — реалізація 1:1 (festival ↔ director person).';

COMMENT ON TABLE "stage" IS 'Сцена є слабкою сутністю, ідентифікується в межах майданчика (venue_id, stage_name).';

COMMENT ON TABLE "event" IS 'Окремий запланований виступ/блок в рамках фестивалю; stage посилається композиційно (venue_id, stage_name).';

COMMENT ON TABLE "artist" IS 'Базова сутність артистів (соло або гурт).';

COMMENT ON TABLE "solo_artist" IS 'Соло-артист як підклас artist.';

COMMENT ON TABLE "band" IS 'Гурт як підклас artist. У гурту є члени (artist_members).';

COMMENT ON TABLE "artist_member" IS 'Члени гурту: рекурсивний звʼязок через артиста-гурт та артиста-людину.';

COMMENT ON TABLE "performance" IS 'Перформанс артиста в межах конкретного event (M:N) з атрибутами.';

COMMENT ON TABLE "event_provider" IS 'Постачальники обладнання/послуг для конкретного event (M:N).';

COMMENT ON TABLE "contract" IS 'Тернарний звʼязок: контракт між артистом, конкретною подією і організатором (який оплачує).';

COMMENT ON TABLE "volunteer_team" IS 'Волонтерська команда як слабка сутність, ідентифікується у контексті фестивалю.';

COMMENT ON TABLE "volunteer_assignment" IS 'Призначення людини до волонтерської команди (звʼязка з слабкою сутністю volunteer_team).';

COMMENT ON TABLE "artist_mentorship" IS 'Менторські звʼязки між артистами (self-relationship). Заборонити mentor_id = mentee_id логікою БД.';

ALTER TABLE "festival" ADD FOREIGN KEY ("main_organizer_id") REFERENCES "organizer" ("id");

ALTER TABLE "festival" ADD FOREIGN KEY ("id") REFERENCES "festival_director" ("festival_id");

ALTER TABLE "festival_director" ADD FOREIGN KEY ("person_id") REFERENCES "person" ("id");

ALTER TABLE "stage" ADD FOREIGN KEY ("venue_id") REFERENCES "venue" ("id");

ALTER TABLE "event" ADD FOREIGN KEY ("festival_id") REFERENCES "festival" ("id");

ALTER TABLE "event" ADD FOREIGN KEY ("venue_id") REFERENCES "venue" ("id");

ALTER TABLE "event" ADD FOREIGN KEY ("venue_id", "stage_name") REFERENCES "stage" ("venue_id", "stage_name");

ALTER TABLE "artist" ADD FOREIGN KEY ("id") REFERENCES "solo_artist" ("artist_id");

ALTER TABLE "artist" ADD FOREIGN KEY ("id") REFERENCES "band" ("artist_id");

ALTER TABLE "artist_member" ADD FOREIGN KEY ("band_artist_id") REFERENCES "artist" ("id");

ALTER TABLE "artist_member" ADD FOREIGN KEY ("member_artist_id") REFERENCES "artist" ("id");

ALTER TABLE "performance" ADD FOREIGN KEY ("event_id") REFERENCES "event" ("id");

ALTER TABLE "performance" ADD FOREIGN KEY ("artist_id") REFERENCES "artist" ("id");

ALTER TABLE "event_provider" ADD FOREIGN KEY ("event_id") REFERENCES "event" ("id");

ALTER TABLE "event_provider" ADD FOREIGN KEY ("provider_id") REFERENCES "equipment_provider" ("id");

ALTER TABLE "contract" ADD FOREIGN KEY ("artist_id") REFERENCES "artist" ("id");

ALTER TABLE "contract" ADD FOREIGN KEY ("event_id") REFERENCES "event" ("id");

ALTER TABLE "contract" ADD FOREIGN KEY ("organizer_id") REFERENCES "organizer" ("id");

ALTER TABLE "volunteer_team" ADD FOREIGN KEY ("festival_id") REFERENCES "festival" ("id");

ALTER TABLE "volunteer_team" ADD FOREIGN KEY ("coordinator_id") REFERENCES "person" ("id");

ALTER TABLE "volunteer_assignment" ADD FOREIGN KEY ("festival_id", "team_name") REFERENCES "volunteer_team" ("festival_id", "team_name");

ALTER TABLE "volunteer_assignment" ADD FOREIGN KEY ("person_id") REFERENCES "person" ("id");

ALTER TABLE "artist_mentorship" ADD FOREIGN KEY ("mentor_id") REFERENCES "artist" ("id");

ALTER TABLE "artist_mentorship" ADD FOREIGN KEY ("mentee_id") REFERENCES "artist" ("id");
